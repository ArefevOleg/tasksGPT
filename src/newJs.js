// Создайте функцию, которая принимает строку
// и один символ и возвращает целое число вхождений
// второго аргумента в первый. Если вхождений не обнаружено,
// должно быть возвращено значение 0.

// function strCount(str, letter){
//   //code here
//   let numb = 0
//   str.split("").forEach(el => el === letter ? numb = numb + 1 : "")
//   return numb
// }
//
// console.log(strCount('Hello', 'o'))//, 1);
///////////////
// Учитывая две строки, a и b, верните строку вида short+long+short,
// где более короткая строка находится снаружи, а более длинная — внутри.
// Строки не будут одинаковой длины, но могут быть пустыми (нулевая длина).
// Подсказка для пользователей R: Длина строки не всегда совпадает с количеством символов.
// For example: (Input1, Input2) --> output
//
// ("1", "22") --> "1221"
// ("22", "1") --> "1221"

// function solution(a, b) {
//   // your code here
// }

///////////////////
// Алексу только что купили новый обруч, он в восторге от него,
// но чувствует себя обескураженным, потому что его младший брат лучше его.
//   Напишите программу, в которую Алекс сможет ввести (n) количество оборотов обруча,
//   и она отправит ему ободряющее сообщение:
//   Если Алекс соберет 10 или более обручей, верните строку "Great, now move on to tricks"
//   Если он не соберет 10 обручей, верните строку "Keep at it until you get it"

// function hoopCount(n) {
//   if (n > 10) {
//     return "Great, now move on to tricks"
//   } else  {
//     return "Keep at it until you get it"
//   }
// }

// function hoopCount(n) {
//   return n >= 10 ?  "Great, now move on to tricks" : "Keep at it until you get it"
// }
//
//
// console.log(hoopCount(3))

// let rows = ["Naomi", "Quincy", "CamperChan"];
// rows.push("Hello")
// console.log(rows)
// function getASCIIChar(num) {
//   return String.fromCharCode(num);
// }
//
// console.log(getASCIIChar(65)); // выведет "A"


// const rows = [];
// let count = 8
// for (let i = 0; i < count; i = i + 1) {
//   rows.push(i)
// }
// console.log(rows)

// Герой направляется в замок, чтобы завершить свою миссию.
// Однако ему сказали, что замок окружен парой могущественных драконов!
// для победы над каждым драконом требуется 2 пули, наш герой понятия не имеет,
// сколько пуль у него должно быть с собой.. Если предположить,
// что он захватит определенное количество пуль и двинется вперед,
// чтобы сразиться с другим определенным количеством драконов, выживет ли он?
//   Верните true, если да, или false в противном случае :)


// function heroWillSurvive(bullets, dragons) {
//   const bulletsRequired = dragons * 2;
//
//   if (bullets >= bulletsRequired) {
//     return true;
//   } else {
//     return false;
//   }
// }
//
// console.log(heroWillSurvive(7 , 4))
//
// Вы были в походе со своими друзьями далеко от дома, но когда пришло время возвращаться,
// вы поняли, что у вас заканчивается топливо, а ближайшая заправка находится в 50 милях!
// Вы знаете, что в среднем ваш автомобиль расходует около 25 миль на галлон. Осталось 2 галлона.
//   Учитывая эти факторы, напишите функцию, которая сообщит вам,
//   возможно ли добраться до насоса или нет.
//   Функция должна возвращать значение true, если это возможно, и значение false, если нет.
//   distanceToPump(до заправки) mpg(остаток) fuelLeft(топливо)

// const zeroFuel = (distanceToPump, mpg, fuelLeft) => {
// return fuelLeft * mpg >= distanceToPump
// };
//
// console.log(zeroFuel(50, 25, 2))

// В этом упражнении мы передаем число (n) в функцию.
// Ваш код определит, является ли переданное число четным (или нет).
// Функция должна возвращать значение true или false.
// Числа могут быть положительными или отрицательными, целыми или с плавающей точкой.
// Числа с плавающей запятой, десятичная часть которых не равна нулю,
// считаются неравномерными для этого ката.

// function testEven(n) {
//  return n % 2 === 0 ? true : false
// }
// console.log(testEven(-2))

// "Точечное отражение" или "точечная симметрия" - это базовое понятие в геометрии,
// согласно которому заданной точке P в заданном положении относительно средней точки Q
// соответствует точка P1, которая находится на том же расстоянии от Q,
// но в противоположном направлении.
// Задача
// Учитывая две точки P и Q, выведите симметричную точку точки P относительно Q.
// Каждый аргумент представляет собой двухэлементный массив целых чисел,
// представляющих координаты точки X и Y. Выходные данные должны быть в том же формате,
// что и координаты X и Y точки P1. Вам не нужно подтверждать вводимые данные.
// Это ката было придумано по мотивам конкурса Hackerrank "Найди точку"
///////////////////////
// После тяжелого рабочего дня в офисе вы решаете немного отдохнуть в отпуске.
// Итак, вы закажете билет на самолет для себя и своей девушки и постараетесь
// забыть обо всех неприятностях.
//   Вам понадобится арендованный автомобиль, чтобы передвигаться по городу во время отпуска.
//   Менеджер пункта проката автомобилей предлагает вам несколько выгодных предложений.
//
//   Стоимость аренды автомобиля за каждый день составляет 40 долларов.
//   Если вы арендуете автомобиль на 7 и более дней, вы получаете скидку в размере 50 долларов
//   от общей суммы. В качестве альтернативы, если вы арендуете автомобиль на 3 или более дней,
//   вы получаете скидку в размере 20 долларов от общей суммы.
//
//   Введите код, который показывает общую сумму за разные дни(d).
// function rentalCarCost(d) {
//   return d * 40 - (d >= 7 ? 50 : (d >= 3 ? 20 : 0));
//   // if (d >= 7) {
//   //   return d * 40 - 50
//   // }
//   // if (d >= 3) {
//   //   return d * 40 - 20
//   // } else {
//   //   return d * 40
//   // }
// }
// console.log(rentalCarCost(3))

// На ежегодном семейном собрании члены семьи обычно определяют
// возраст самого старшего из ныне живущих членов семьи и возраст
// самого младшего из них и подсчитывают разницу между ними.
// Вам будет предоставлен список возрастов всех членов семьи в произвольном порядке.
// Возраст будет указан целыми числами, поэтому 5-месячному ребенку будет присвоен "возраст",
// равный 0. Верните новый массив (кортеж в Python) с [самый младший возраст,
// самый старший возраст, разница между самым младшим и самым старшим возрастом].
// ([82, 15, 6, 38, 35]), [6, 82, 76])
// const ages = [82, 15, 6, 38, 35];
// function differenceInAges(ages){
//   const old = Math.max(...ages)
//   const child = Math.min(...ages)
//   const oldChild = old - child
//   return [child, old, oldChild];
//
//   // const min = Math.min(...ages);
//   // const max = Math.max(...ages);
//   //
//   // return [min, max, max-min];
// }
//
// console.log(differenceInAges(ages))
////////